{"ast":null,"code":"// cartReducer.js\nconst initialState = {\n  cart: JSON.parse(localStorage.getItem('cart')) || [] // Load cart from local storage or initialize as empty array\n};\nconst cartReducer = (state = initialState, action) => {\n  let newCart;\n  switch (action.type) {\n    case 'ADD_TO_CART':\n      // Check if the item is already in the cart\n      const existingItemIndex = state.cart.findIndex(item => item.id === action.payload.id);\n      if (existingItemIndex >= 0) {\n        // If it is, increment the quantity\n        newCart = [...state.cart];\n        newCart[existingItemIndex].quantity += 1;\n      } else {\n        // Otherwise, add the new item to the cart\n        newCart = [...state.cart, {\n          ...action.payload,\n          quantity: 1\n        }];\n      }\n      localStorage.setItem('cart', JSON.stringify(newCart));\n      return {\n        ...state,\n        cart: newCart\n      };\n    case 'REMOVE_FROM_CART':\n      newCart = state.cart.filter(item => item.id !== action.payload.id);\n      localStorage.setItem('cart', JSON.stringify(newCart));\n      return {\n        ...state,\n        cart: newCart\n      };\n    case 'INCREMENT_ITEM':\n      newCart = state.cart.map(item => item.id === action.payload.id ? {\n        ...item,\n        quantity: item.quantity + 1\n      } : item);\n      localStorage.setItem('cart', JSON.stringify(newCart));\n      return {\n        ...state,\n        cart: newCart\n      };\n    case 'DECREMENT_ITEM':\n      newCart = state.cart.map(item => item.id === action.payload.id ? {\n        ...item,\n        quantity: item.quantity - 1\n      } : item).filter(item => item.quantity > 0);\n      localStorage.setItem('cart', JSON.stringify(newCart));\n      return {\n        ...state,\n        cart: newCart\n      };\n    default:\n      return state;\n  }\n};\nexport default cartReducer;","map":{"version":3,"names":["initialState","cart","JSON","parse","localStorage","getItem","cartReducer","state","action","newCart","type","existingItemIndex","findIndex","item","id","payload","quantity","setItem","stringify","filter","map"],"sources":["C:/Users/Player/Documents/GitHub/web-development-projects/React/paradise-nursery/src/redux/cartReducer.js"],"sourcesContent":["// cartReducer.js\r\nconst initialState = {\r\n  cart: JSON.parse(localStorage.getItem('cart')) || []  // Load cart from local storage or initialize as empty array\r\n};\r\n\r\nconst cartReducer = (state = initialState, action) => {\r\n  let newCart;\r\n\r\n  switch (action.type) {\r\n    case 'ADD_TO_CART':\r\n      // Check if the item is already in the cart\r\n      const existingItemIndex = state.cart.findIndex(item => item.id === action.payload.id);\r\n      if (existingItemIndex >= 0) {\r\n        // If it is, increment the quantity\r\n        newCart = [...state.cart];\r\n        newCart[existingItemIndex].quantity += 1;\r\n      } else {\r\n        // Otherwise, add the new item to the cart\r\n        newCart = [...state.cart, { ...action.payload, quantity: 1 }];\r\n      }\r\n      localStorage.setItem('cart', JSON.stringify(newCart));\r\n      return {\r\n        ...state,\r\n        cart: newCart\r\n      };\r\n\r\n    case 'REMOVE_FROM_CART':\r\n      newCart = state.cart.filter(item => item.id !== action.payload.id);\r\n      localStorage.setItem('cart', JSON.stringify(newCart));\r\n      return {\r\n        ...state,\r\n        cart: newCart\r\n      };\r\n\r\n    case 'INCREMENT_ITEM':\r\n      newCart = state.cart.map(item =>\r\n        item.id === action.payload.id ? { ...item, quantity: item.quantity + 1 } : item\r\n      );\r\n      localStorage.setItem('cart', JSON.stringify(newCart));\r\n      return {\r\n        ...state,\r\n        cart: newCart\r\n      };\r\n\r\n    case 'DECREMENT_ITEM':\r\n      newCart = state.cart.map(item =>\r\n        item.id === action.payload.id ? { ...item, quantity: item.quantity - 1 } : item\r\n      ).filter(item => item.quantity > 0);\r\n      localStorage.setItem('cart', JSON.stringify(newCart));\r\n      return {\r\n        ...state,\r\n        cart: newCart\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default cartReducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG;EACnBC,IAAI,EAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAE;AACxD,CAAC;AAED,MAAMC,WAAW,GAAGA,CAACC,KAAK,GAAGP,YAAY,EAAEQ,MAAM,KAAK;EACpD,IAAIC,OAAO;EAEX,QAAQD,MAAM,CAACE,IAAI;IACjB,KAAK,aAAa;MAChB;MACA,MAAMC,iBAAiB,GAAGJ,KAAK,CAACN,IAAI,CAACW,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKN,MAAM,CAACO,OAAO,CAACD,EAAE,CAAC;MACrF,IAAIH,iBAAiB,IAAI,CAAC,EAAE;QAC1B;QACAF,OAAO,GAAG,CAAC,GAAGF,KAAK,CAACN,IAAI,CAAC;QACzBQ,OAAO,CAACE,iBAAiB,CAAC,CAACK,QAAQ,IAAI,CAAC;MAC1C,CAAC,MAAM;QACL;QACAP,OAAO,GAAG,CAAC,GAAGF,KAAK,CAACN,IAAI,EAAE;UAAE,GAAGO,MAAM,CAACO,OAAO;UAAEC,QAAQ,EAAE;QAAE,CAAC,CAAC;MAC/D;MACAZ,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEf,IAAI,CAACgB,SAAS,CAACT,OAAO,CAAC,CAAC;MACrD,OAAO;QACL,GAAGF,KAAK;QACRN,IAAI,EAAEQ;MACR,CAAC;IAEH,KAAK,kBAAkB;MACrBA,OAAO,GAAGF,KAAK,CAACN,IAAI,CAACkB,MAAM,CAACN,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKN,MAAM,CAACO,OAAO,CAACD,EAAE,CAAC;MAClEV,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEf,IAAI,CAACgB,SAAS,CAACT,OAAO,CAAC,CAAC;MACrD,OAAO;QACL,GAAGF,KAAK;QACRN,IAAI,EAAEQ;MACR,CAAC;IAEH,KAAK,gBAAgB;MACnBA,OAAO,GAAGF,KAAK,CAACN,IAAI,CAACmB,GAAG,CAACP,IAAI,IAC3BA,IAAI,CAACC,EAAE,KAAKN,MAAM,CAACO,OAAO,CAACD,EAAE,GAAG;QAAE,GAAGD,IAAI;QAAEG,QAAQ,EAAEH,IAAI,CAACG,QAAQ,GAAG;MAAE,CAAC,GAAGH,IAC7E,CAAC;MACDT,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEf,IAAI,CAACgB,SAAS,CAACT,OAAO,CAAC,CAAC;MACrD,OAAO;QACL,GAAGF,KAAK;QACRN,IAAI,EAAEQ;MACR,CAAC;IAEH,KAAK,gBAAgB;MACnBA,OAAO,GAAGF,KAAK,CAACN,IAAI,CAACmB,GAAG,CAACP,IAAI,IAC3BA,IAAI,CAACC,EAAE,KAAKN,MAAM,CAACO,OAAO,CAACD,EAAE,GAAG;QAAE,GAAGD,IAAI;QAAEG,QAAQ,EAAEH,IAAI,CAACG,QAAQ,GAAG;MAAE,CAAC,GAAGH,IAC7E,CAAC,CAACM,MAAM,CAACN,IAAI,IAAIA,IAAI,CAACG,QAAQ,GAAG,CAAC,CAAC;MACnCZ,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEf,IAAI,CAACgB,SAAS,CAACT,OAAO,CAAC,CAAC;MACrD,OAAO;QACL,GAAGF,KAAK;QACRN,IAAI,EAAEQ;MACR,CAAC;IAEH;MACE,OAAOF,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}